# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET    /                           controllers.Application.index()
GET    /dashboard                  controllers.Dashboard.index()

#POST   /login                      controllers.Application.authenticate()
GET    /logout                     controllers.Application.logout()

GET    /contact                    controllers.Application.contact()
POST   /contact                    controllers.Application.contactSend()

# Authenticates/Logins the user...
GET    /auth                       controllers.Application.openLogin()
POST   /auth                       controllers.Application.authenticate()

#GET    /authenticate/:provider     securesocial.controllers.ProviderController.authenticate(provider)
#POST   /authenticate/:provider     securesocial.controllers.ProviderController.authenticateByPost(provider)

GET    /accessdenied               controllers.Application.accessDenied()

# User pages...
GET    /user                       controllers.Application.userHome()

GET    /addintake                  controllers.Application.addIntake()
POST   /addintake                  controllers.Application.saveIntake()

GET    /searchintake               controllers.Application.searchIntake()

GET    /filterintake               controllers.Application.filterIntake(type: String, value: String)

GET    /filtersearch               controllers.Application.filterIntake(type: String, value: String)

GET    /reports/:reportType        controllers.Application.reportsCreate(reportType: String)

GET    /openintake/:intakekey      controllers.Application.openIntake(intakekey: String)
POST   /openintake/:intakekey      controllers.Application.updateIntake(intakekey: String)

GET    /deleteintake/:intakekey    controllers.Application.deleteIntakeConfirm(intakekey: String)
POST   /deleteintake/:intakekey    controllers.Application.deleteIntake(intakekey: String)

GET    /exportintake               controllers.Application.exportIntake(type: String, value: String)

GET    /useraccount                controllers.Application.openUserAccount(email: String)
POST   /useraccount                controllers.Application.updateUserAccount()

GET    /addcomments                controllers.Application.addComments(intakekey: String, comment: String)

# Admin pages...
GET    /admin                      controllers.Application.adminHome()

GET    /adduser                    controllers.account.Signup.createUser()
POST   /adduser                    controllers.account.Signup.saveUser()

GET    /tablemaint                 controllers.Application.lookupMaintenance()

GET    /adminuser                  controllers.Application.userMaintenance()

GET    /search                     controllers.Application.getAllUsers()

GET    /searchprojects             controllers.Application.getAllProjects()

GET    /mainsearch/:searchText     controllers.Application.getProjectsWilcard(searchText: String)

GET    /finduser                   controllers.Application.findUser()
POST   /finduser                   controllers.Application.getUserByEmailWildcard()

POST   /updateuser                 controllers.Application.updateUser()

GET    /exportusers/:data          controllers.Application.exportUsers(data: String)

POST   /exportOpenFile/:fileName   controllers.Application.exportOpenFile(fileName: String)

GET    /openuser                   controllers.Application.openUser()

GET    /addlookup                  controllers.Application.addLookup()
POST   /addlookup                  controllers.Application.saveLookup()

GET    /openlookup/:lookupkey      controllers.Application.openLookup(lookupkey: String)
POST   /openlookup/:lookupkey      controllers.Application.updateLookup(lookupkey: String)

GET    /filterlookups              controllers.Application.filterLookups(type: String, value: String)

GET    /finduserurl                controllers.Application.getUserByUrl(userkey: String)

GET    /deleteuser/:userkey        controllers.Application.deleteUserConfirm(userkey: String)
POST   /deleteuser/:userkey        controllers.Application.deleteUser(userkey: String)

GET    /resetuser/:token           controllers.account.Reset.resetUser(token:String)
POST   /resetuser/:token           controllers.account.Reset.runResetUser(token:String)

GET    /populatelookups            controllers.Application.populateLookups()

# User settings...
GET    /settings                   controllers.account.settings.Index.index()
GET    /settings/password          controllers.account.settings.Password.index()
POST   /settings/password          controllers.account.settings.Password.runPassword()
GET    /settings/email             controllers.account.settings.Email.index()
POST   /settings/email             controllers.account.settings.Email.runEmail()

# Registers the user, sending an email to confirm the account.
GET    /signup                     controllers.account.Signup.create()
POST   /signup                     controllers.account.Signup.save()

# Accessed when the user confirms the registration.
GET    /confirm/:confirmToken      controllers.account.Signup.confirm(confirmToken:String)

# Displays a page to send a reset email given the user's email.
GET    /reset/ask                  controllers.account.Reset.ask()
POST   /reset/ask                  controllers.account.Reset.runAsk()

# Resets the password using the password.
GET    /reset/:token               controllers.account.Reset.reset(token:String)
POST   /reset/:token               controllers.account.Reset.runReset(token:String)

GET    /email/:token               controllers.account.settings.Email.validateEmail(token:String)

# Map static resources from the /public folder to the /assets URL path
GET    /assets/*file               controllers.Assets.at(path="/public", file)

